/*
 * Copyright (C) 2018 Michal G.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cogimag.java.keyboard;

import java.util.HashMap;
import java.awt.event.KeyEvent;

/**
 * The mapping for the US-English keyboard. 
 * @author Michal G.
 */
public class AwtKeyMap_EN_US extends AwtKeyMap {    
    /**    
     * Intentionally hides the HashMap of the parent class. Contains a map
     * of integer ASCII codes to their respective AwtCharConstruction objects.
     */    
    public static final HashMap<Integer, AwtCharConstruction> KEY_MAP = makeMap();
    /**
     * Put statements must be pasted manually using the 
     * {@link cogimag.java.keyboard.development.AwtMapGenerator} tool.
     * Credit for static initializer technique to SO 6802483 and 26999663. 
     * @return {@link #KEY_MAP}
     */
    public static HashMap<Integer, AwtCharConstruction> makeMap() {
//        System.out.println("en-us static method");        
        
        HashMap<Integer, AwtCharConstruction> map = new HashMap<>();
        
        //manually added        
        map.put(10, new AwtCharConstruction("\n", KeyEvent.VK_ENTER, false));
        map.put(9, new AwtCharConstruction("\t", KeyEvent.VK_TAB, false));
        map.put(92, new AwtCharConstruction("\\", KeyEvent.VK_BACK_SLASH, false));
        map.put(34, new AwtCharConstruction("\"", KeyEvent.VK_QUOTE, true));
        
        //generated by MapGenerator
        //row 1, not shifted
        map.put(49, new AwtCharConstruction("1", KeyEvent.VK_1, false));
        map.put(50, new AwtCharConstruction("2", KeyEvent.VK_2, false));
        map.put(51, new AwtCharConstruction("3", KeyEvent.VK_3, false));
        map.put(52, new AwtCharConstruction("4", KeyEvent.VK_4, false));
        map.put(53, new AwtCharConstruction("5", KeyEvent.VK_5, false));
        map.put(54, new AwtCharConstruction("6", KeyEvent.VK_6, false));
        map.put(55, new AwtCharConstruction("7", KeyEvent.VK_7, false));
        map.put(56, new AwtCharConstruction("8", KeyEvent.VK_8, false));
        map.put(57, new AwtCharConstruction("9", KeyEvent.VK_9, false));
        map.put(48, new AwtCharConstruction("0", KeyEvent.VK_0, false));
        map.put(45, new AwtCharConstruction("-", KeyEvent.VK_MINUS, false));
        map.put(61, new AwtCharConstruction("=", KeyEvent.VK_EQUALS, false));
        //row 1, shifted
        map.put(33, new AwtCharConstruction("!", KeyEvent.VK_1, true));
        map.put(64, new AwtCharConstruction("@", KeyEvent.VK_2, true));
        map.put(35, new AwtCharConstruction("#", KeyEvent.VK_3, true));
        map.put(36, new AwtCharConstruction("$", KeyEvent.VK_4, true));
        map.put(37, new AwtCharConstruction("%", KeyEvent.VK_5, true));
        map.put(94, new AwtCharConstruction("^", KeyEvent.VK_6, true));
        map.put(38, new AwtCharConstruction("&", KeyEvent.VK_7, true));
        map.put(42, new AwtCharConstruction("*", KeyEvent.VK_8, true));
        map.put(40, new AwtCharConstruction("(", KeyEvent.VK_9, true));
        map.put(41, new AwtCharConstruction(")", KeyEvent.VK_0, true));
        map.put(95, new AwtCharConstruction("_", KeyEvent.VK_MINUS, true));
        map.put(43, new AwtCharConstruction("+", KeyEvent.VK_EQUALS, true));
        //row 2, not shifted
        map.put(113, new AwtCharConstruction("q", KeyEvent.VK_Q, false));
        map.put(119, new AwtCharConstruction("w", KeyEvent.VK_W, false));
        map.put(101, new AwtCharConstruction("e", KeyEvent.VK_E, false));
        map.put(114, new AwtCharConstruction("r", KeyEvent.VK_R, false));
        map.put(116, new AwtCharConstruction("t", KeyEvent.VK_T, false));
        map.put(121, new AwtCharConstruction("y", KeyEvent.VK_Y, false));
        map.put(117, new AwtCharConstruction("u", KeyEvent.VK_U, false));
        map.put(105, new AwtCharConstruction("i", KeyEvent.VK_I, false));
        map.put(111, new AwtCharConstruction("o", KeyEvent.VK_O, false));
        map.put(112, new AwtCharConstruction("p", KeyEvent.VK_P, false));
        map.put(91, new AwtCharConstruction("[", KeyEvent.VK_OPEN_BRACKET, false));
        map.put(93, new AwtCharConstruction("]", KeyEvent.VK_CLOSE_BRACKET, false));    
        //row 2, shifted
        map.put(81, new AwtCharConstruction("Q", KeyEvent.VK_Q, true));
        map.put(87, new AwtCharConstruction("W", KeyEvent.VK_W, true));
        map.put(69, new AwtCharConstruction("E", KeyEvent.VK_E, true));
        map.put(82, new AwtCharConstruction("R", KeyEvent.VK_R, true));
        map.put(84, new AwtCharConstruction("T", KeyEvent.VK_T, true));
        map.put(89, new AwtCharConstruction("Y", KeyEvent.VK_Y, true));
        map.put(85, new AwtCharConstruction("U", KeyEvent.VK_U, true));
        map.put(73, new AwtCharConstruction("I", KeyEvent.VK_I, true));
        map.put(79, new AwtCharConstruction("O", KeyEvent.VK_O, true));
        map.put(80, new AwtCharConstruction("P", KeyEvent.VK_P, true));
        map.put(123, new AwtCharConstruction("{", KeyEvent.VK_OPEN_BRACKET, true));
        map.put(125, new AwtCharConstruction("}", KeyEvent.VK_CLOSE_BRACKET, true));
        map.put(124, new AwtCharConstruction("|", KeyEvent.VK_BACK_SLASH, true));
        //row 3, not shifted
        map.put(97, new AwtCharConstruction("a", KeyEvent.VK_A, false));
        map.put(115, new AwtCharConstruction("s", KeyEvent.VK_S, false));
        map.put(100, new AwtCharConstruction("d", KeyEvent.VK_D, false));
        map.put(102, new AwtCharConstruction("f", KeyEvent.VK_F, false));
        map.put(103, new AwtCharConstruction("g", KeyEvent.VK_G, false));
        map.put(104, new AwtCharConstruction("h", KeyEvent.VK_H, false));
        map.put(106, new AwtCharConstruction("j", KeyEvent.VK_J, false));
        map.put(107, new AwtCharConstruction("k", KeyEvent.VK_K, false));
        map.put(108, new AwtCharConstruction("l", KeyEvent.VK_L, false));
        map.put(59, new AwtCharConstruction(";", KeyEvent.VK_SEMICOLON, false));
        map.put(39, new AwtCharConstruction("'", KeyEvent.VK_QUOTE, false));
        //row 3, shifted
        map.put(65, new AwtCharConstruction("A", KeyEvent.VK_A, true));
        map.put(83, new AwtCharConstruction("S", KeyEvent.VK_S, true));
        map.put(68, new AwtCharConstruction("D", KeyEvent.VK_D, true));
        map.put(70, new AwtCharConstruction("F", KeyEvent.VK_F, true));
        map.put(71, new AwtCharConstruction("G", KeyEvent.VK_G, true));
        map.put(72, new AwtCharConstruction("H", KeyEvent.VK_H, true));
        map.put(74, new AwtCharConstruction("J", KeyEvent.VK_J, true));
        map.put(75, new AwtCharConstruction("K", KeyEvent.VK_K, true));
        map.put(76, new AwtCharConstruction("L", KeyEvent.VK_L, true));
        map.put(58, new AwtCharConstruction(":", KeyEvent.VK_SEMICOLON, true));
        //row 4, not shifted
        map.put(122, new AwtCharConstruction("z", KeyEvent.VK_Z, false));
        map.put(120, new AwtCharConstruction("x", KeyEvent.VK_X, false));
        map.put(99, new AwtCharConstruction("c", KeyEvent.VK_C, false));
        map.put(118, new AwtCharConstruction("v", KeyEvent.VK_V, false));
        map.put(98, new AwtCharConstruction("b", KeyEvent.VK_B, false));
        map.put(110, new AwtCharConstruction("n", KeyEvent.VK_N, false));
        map.put(109, new AwtCharConstruction("m", KeyEvent.VK_M, false));
        map.put(44, new AwtCharConstruction(",", KeyEvent.VK_COMMA, false));
        map.put(46, new AwtCharConstruction(".", KeyEvent.VK_PERIOD, false));
        map.put(47, new AwtCharConstruction("/", KeyEvent.VK_SLASH, false));
        //row 4, shifted
        map.put(90, new AwtCharConstruction("Z", KeyEvent.VK_Z, true));
        map.put(88, new AwtCharConstruction("X", KeyEvent.VK_X, true));
        map.put(67, new AwtCharConstruction("C", KeyEvent.VK_C, true));
        map.put(86, new AwtCharConstruction("V", KeyEvent.VK_V, true));
        map.put(66, new AwtCharConstruction("B", KeyEvent.VK_B, true));
        map.put(78, new AwtCharConstruction("N", KeyEvent.VK_N, true));
        map.put(77, new AwtCharConstruction("M", KeyEvent.VK_M, true));
        map.put(60, new AwtCharConstruction("<", KeyEvent.VK_COMMA, true));
        map.put(62, new AwtCharConstruction(">", KeyEvent.VK_PERIOD, true));
        map.put(63, new AwtCharConstruction("?", KeyEvent.VK_SLASH, true));
        //row 5
        map.put(32, new AwtCharConstruction(" ", KeyEvent.VK_SPACE, false));
        //map generator produces this for alt-0233.
//        map.put(233, new AwtCharConstruction("Ã©", KeyEvent.VK_NUMPAD3, false));

        return map;
    }
    
    @Override
    public AwtCharConstruction getCharCon(char c) {
        return AwtKeyMap_EN_US.KEY_MAP.get(Character.toString(c).codePointAt(0));
    }
    
    @Override
    public AwtCharConstruction getCharCon(int ascii_code) {
        return AwtKeyMap_EN_US.KEY_MAP.get(ascii_code);
    }    
}
